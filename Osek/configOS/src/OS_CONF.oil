// ===================================================================
// FILENAME:   $Source: OS_CONF.oil $
// COMPILER:   TaskingCTC v3.3r1
// PURPOSE:    OIL-Definition-File (OSEK configuration)
// PROCESSOR:  TC1767
//
// DATE OF CREATION:  2010/06/23
// LAST REVISION:     $Date: 2011/02/24 12:35:21MEZ $
//                    $Author: Cotor Vlad RGB (COTORV) $
//
// ===================================================================
// $Log: OS_CONF.oil  $
// Revision 1.11 2011/02/24 12:35:21MEZ Cotor Vlad RGB (COTORV) 
// - Develop shutdown function for xCU power control
// Revision 1.10 2011/02/12 13:16:44MEZ Opel Martin RGB (OPELM) 
// - added extra tasks for XCP comminucation with low priority
// Revision 1.9 2010/11/08 13:11:48MEZ Kubot Markus RGB (KUBOTM) 
// - Extended the stacksize of wrong task 1ms instead of 100ms preemptive task
// - copied the documentation header
// Revision 1.7 2010/11/08 09:07:27MEZ Kubot Markus RGB_Ext (KUBOTM) 
// - Extended stack size from 3k to 5k due to battery core function
// - Extended stack size of preemptive task 100ms to 3072 bytes
// Revision 1.6 2010/07/27 17:12:28MESZ Cotor Vlad RGB (COTORV) 
// Introduce a 100ms preemptive task for calculation of Kalman filter
// Revision 1.5 2010/07/22 13:35:48MESZ Cotor Vlad RGB (COTORV) 
// Correction of System Clock Divider due to wrong task duration
// Revision 1.4 2010/07/13 13:36:27MESZ Cotor Vlad RGB (COTORV) 
// Update of ARE9018.lsl due to update of OS stack sharing.
// For all non-preemptive tasks is needed only one stack.
// The actual os stack configuration is presented as follow:
// 
// 1024 Bytes system stack
// 1024 Bytes for all non-preemptive tasks together
// Revision 1.3 2010/07/12 09:39:16MESZ Cotor Vlad RGB (COTORV) 
// Integration of EcuM, Fee, NvM, RamTst
// Update of memory mapping due to EcuM, Fee, NvM, RamTst,
// Upfate of ARE9018.lsl file due to EcuM
// Revision 1.2 2010/07/07 15:56:05MESZ Opel Martin RGB (OPELM) 
// - added header
// - changed includes (removed absolute path)
// ===================================================================
OIL_VERSION = "3.2";

#include <tc1767.i32>

CPU dummy {
   #include <tc1767.s32>

   OS StdOS {
      SCALABILITYCLASS = SC1;
      STATUS = EXTENDED;
      STARTUPHOOK = TRUE;
      ERRORHOOK = TRUE;
      SHUTDOWNHOOK = TRUE;
      PRETASKHOOK = FALSE;
      POSTTASKHOOK = FALSE;
      PROTECTIONHOOK = FALSE;
      USEGETSERVICEID = FALSE;
      USEPARAMETERACCESS = FALSE;
      USERESSCHEDULER = FALSE;
      SCHEDULE = AUTO;
      CC = AUTO;
      ProtectionHookReaction = ALL;
      StackModel = STANDARD;
      SystemStackSize = 1024;
      InterruptVectorTableSize = 255;
      InterruptVectorTableLocation = ROM;
      STACKMONITORING = TRUE;
      StackUsageMeasurement = AUTO;
      CpuFrequency = 80.0000;
      SystemClockDivider = 2;
      TimerClockDivider = AUTO;
      TickTime = 100;
      SystemTimer = STM_CMP0;
      UseGeneratedFastAlarm = FALSE;
      SystemTimerISRPrio = 4;
      ErrorInfoLevel = STANDARD;
      OSInternalChecks = STANDARD;
      Compiler = Tasking;
      TimingMeasurement = FALSE;
      ORTIDebugSupport = TRUE: "To be disabled before production!";
      ORTIDebugLevel = ORTI_20: "To be disabled before production!";
      APIOptimization = Automatic;
      TypeHeaderInclude = FALSE;
   }: "Standard object for operating system configuration";

   TASK Task_1ms {
      TYPE = BASIC;
      SCHEDULE = NON;
      PRIORITY = 60;
      ACTIVATION = 1;
      TIMING_PROTECTION = FALSE;
      AUTOSTART = FALSE;
      RESOURCE = COOPERATE;
      StackSize = 1024;
      NotUsingSchedule = TRUE;
   }: "This task is called every 1ms";

   TASK Task_10ms {
      TYPE = BASIC;
      SCHEDULE = NON;
      PRIORITY = 50;
      ACTIVATION = 1;
      TIMING_PROTECTION = FALSE;
      AUTOSTART = FALSE;
      RESOURCE = COOPERATE;
      StackSize = 1024;
      NotUsingSchedule = TRUE;
   }: "This task is called every 10ms";

   TASK Task_100ms {
      TYPE = BASIC;
      SCHEDULE = NON;
      PRIORITY = 20;
      ACTIVATION = 1;
      TIMING_PROTECTION = FALSE;
      AUTOSTART = FALSE;
      RESOURCE = COOPERATE;
      StackSize = 1024;
      NotUsingSchedule = TRUE;
   }: "This task is called every 100ms";

   TASK SCHM_TASK_CYCLE_10MS {
      TYPE = BASIC;
      SCHEDULE = NON;
      PRIORITY = 30;
      ACTIVATION = 1;
      TIMING_PROTECTION = FALSE;
      AUTOSTART = FALSE;
      StackSize = 1024;
      NotUsingSchedule = TRUE;
   }: "This task is called every 10 ms and  is used from SchM";

   TASK Task_100ms_preemptive {
      TYPE = AUTO;
      SCHEDULE = FULL;
      PRIORITY = 1;
      ACTIVATION = 1;
      TIMING_PROTECTION = FALSE;
      AUTOSTART = FALSE;
      StackSize = 3072;
      NotUsingSchedule = TRUE;
   }: "This task can be interrupted from all other tasks";

   TASK Task_1ms_XCP {
      TYPE = BASIC;
      SCHEDULE = FULL;
      PRIORITY = 5;
      ACTIVATION = 15;
      TIMING_PROTECTION = FALSE;
      AUTOSTART = FALSE;
      RESOURCE = XCP;
      StackSize = 128;
      NotUsingSchedule = TRUE;
   };

   TASK Task_10ms_XCP {
      TYPE = BASIC;
      SCHEDULE = FULL;
      PRIORITY = 4;
      ACTIVATION = 15;
      TIMING_PROTECTION = FALSE;
      AUTOSTART = FALSE;
      RESOURCE = XCP;
      StackSize = 128;
      NotUsingSchedule = TRUE;
   };

   TASK Task_100ms_XCP {
      TYPE = BASIC;
      SCHEDULE = FULL;
      PRIORITY = 3;
      ACTIVATION = 15;
      TIMING_PROTECTION = FALSE;
      AUTOSTART = FALSE;
      RESOURCE = XCP;
      StackSize = 128;
      NotUsingSchedule = TRUE;
   };

   ALARM Alarm_10ms {
      COUNTER = SystemTimer;
      ACTION = ACTIVATETASK
      {
         TASK = Task_10ms;
      };
      AUTOSTART = TRUE
      {
         ALARMTIME = 1;
         CYCLETIME = 10;
         TYPE = RELATIVE;
         APPMODE = OSDEFAULTAPPMODE;
         AlarmUnit = MSEC;
         StaticAlarm = TRUE;
      };
   };

   ALARM Alarm_100ms {
      COUNTER = SystemTimer;
      ACTION = ACTIVATETASK
      {
         TASK = Task_100ms;
      };
      AUTOSTART = TRUE
      {
         ALARMTIME = 1;
         CYCLETIME = 100;
         TYPE = RELATIVE;
         APPMODE = OSDEFAULTAPPMODE;
         AlarmUnit = MSEC;
         StaticAlarm = TRUE;
      };
   };

   ALARM Alarm_SCHM_TASK_CYCLE_10MS {
      COUNTER = SystemTimer;
      ACTION = ACTIVATETASK
      {
         TASK = SCHM_TASK_CYCLE_10MS;
      };
      AUTOSTART = FALSE
      {
         StaticAlarm = TRUE
         {
            AlarmTime = 1;
            CycleTime = 10;
            AlarmUnit = MSEC;
         };
      };
   };

   ALARM Alarm_100ms_preemptive {
      COUNTER = SystemTimer;
      ACTION = ACTIVATETASK
      {
         TASK = Task_100ms_preemptive;
      };
      AUTOSTART = TRUE
      {
         ALARMTIME = 1;
         CYCLETIME = 100;
         TYPE = RELATIVE;
         APPMODE = OSDEFAULTAPPMODE;
         AlarmUnit = MSEC;
         StaticAlarm = TRUE;
      };
   };

   ALARM Alarm_1ms {
      COUNTER = SystemTimer;
      ACTION = ACTIVATETASK
      {
         TASK = Task_1ms;
      };
      AUTOSTART = TRUE
      {
         ALARMTIME = 1;
         CYCLETIME = 1;
         TYPE = RELATIVE;
         APPMODE = OSDEFAULTAPPMODE;
         AlarmUnit = MSEC;
         StaticAlarm = TRUE;
      };
   };

   ALARM Alarm_10ms_XCP {
      COUNTER = SystemTimer;
      ACTION = ACTIVATETASK
      {
         TASK = Task_10ms_XCP;
      };
      AUTOSTART = TRUE
      {
         ALARMTIME = 1;
         CYCLETIME = 10;
         TYPE = RELATIVE;
         APPMODE = OSDEFAULTAPPMODE;
         AlarmUnit = MSEC;
         StaticAlarm = TRUE;
      };
   };

   ALARM Alarm_100ms_XCP {
      COUNTER = SystemTimer;
      ACTION = ACTIVATETASK
      {
         TASK = Task_100ms_XCP;
      };
      AUTOSTART = TRUE
      {
         ALARMTIME = 1;
         CYCLETIME = 100;
         TYPE = RELATIVE;
         APPMODE = OSDEFAULTAPPMODE;
         AlarmUnit = MSEC;
         StaticAlarm = TRUE;
      };
   };

   ALARM Alarm_1ms_XCP {
      COUNTER = SystemTimer;
      ACTION = ACTIVATETASK
      {
         TASK = Task_1ms_XCP;
      };
      AUTOSTART = TRUE
      {
         ALARMTIME = 1;
         CYCLETIME = 1;
         TYPE = RELATIVE;
         APPMODE = OSDEFAULTAPPMODE;
         AlarmUnit = MSEC;
         StaticAlarm = TRUE;
      };
   };

   RESOURCE COOPERATE {
      RESOURCEPROPERTY = STANDARD;
   };

   RESOURCE XCP {
      RESOURCEPROPERTY = STANDARD;
   };

   ISR Spi_Irq0func {
      CATEGORY = 1;
      TIMING_PROTECTION = FALSE;
      EnableNesting = FALSE;
      InterruptPriority = 10;
      SRCAddr = 0xF01001F8;
      StackSize = 200;
      DoNotGenerateVector = FALSE;
      UseSpecialFunctionName = FALSE;
   };

   ISR Spi_Irq1func {
      CATEGORY = 1;
      TIMING_PROTECTION = FALSE;
      EnableNesting = FALSE;
      InterruptPriority = 11;
      SRCAddr = 0xF01002F8;
      StackSize = 200;
      DoNotGenerateVector = FALSE;
      UseSpecialFunctionName = FALSE;
   };

   ISR CanIsr_0 {
      CATEGORY = 1;
      TIMING_PROTECTION = FALSE;
      EnableNesting = FALSE;
      InterruptPriority = 35;
      SRCAddr = 0xF00040FC;
      StackSize = 200;
      DoNotGenerateVector = TRUE;
      UseSpecialFunctionName = FALSE;
   };

   ISR CanIsr_1 {
      CATEGORY = 1;
      TIMING_PROTECTION = FALSE;
      EnableNesting = FALSE;
      InterruptPriority = 36;
      SRCAddr = 0xF00040F8;
      StackSize = 200;
      DoNotGenerateVector = TRUE;
      UseSpecialFunctionName = FALSE;
   };

   ISR Adc_Irq0func {
      CATEGORY = 1;
      TIMING_PROTECTION = FALSE;
      EnableNesting = FALSE;
      InterruptPriority = 12;
      SRCAddr = 0xF0003EFC;
      StackSize = 200;
      DoNotGenerateVector = FALSE;
      UseSpecialFunctionName = FALSE;
   };

   ISR Adc_Irq2func {
      CATEGORY = 1;
      TIMING_PROTECTION = FALSE;
      EnableNesting = FALSE;
      InterruptPriority = 13;
      SRCAddr = 0xF0003EF4;
      StackSize = 200;
      DoNotGenerateVector = FALSE;
      UseSpecialFunctionName = FALSE;
   };

   ISR Adc_Irq1func {
      CATEGORY = 1;
      TIMING_PROTECTION = FALSE;
      EnableNesting = FALSE;
      InterruptPriority = 14;
      SRCAddr = 0xF0003EF8;
      StackSize = 200;
      DoNotGenerateVector = FALSE;
      UseSpecialFunctionName = FALSE;
   };

   ISR Adc_Irq3func {
      CATEGORY = 1;
      TIMING_PROTECTION = FALSE;
      EnableNesting = FALSE;
      InterruptPriority = 15;
      SRCAddr = 0xF0003EF0;
      StackSize = 200;
      DoNotGenerateVector = FALSE;
      UseSpecialFunctionName = FALSE;
   };

   ISR Gpt_Irq1func {
      CATEGORY = 1;
      TIMING_PROTECTION = FALSE;
      EnableNesting = FALSE;
      InterruptPriority = 16;
      SRCAddr = 0xF0001FF4;
      StackSize = 200;
      DoNotGenerateVector = FALSE;
      UseSpecialFunctionName = FALSE;
   };

   ISR Gpt_Irq2func {
      CATEGORY = 1;
      TIMING_PROTECTION = FALSE;
      EnableNesting = FALSE;
      InterruptPriority = 17;
      SRCAddr = 0xf0001fec;
      StackSize = 200;
      DoNotGenerateVector = FALSE;
      UseSpecialFunctionName = FALSE;
   };

   COM StdCOM {
      COMERRORHOOK = FALSE;
      COMUSEGETSERVICEID = FALSE;
      COMUSEPARAMETERACCESS = FALSE;
      COMSTARTCOMEXTENSION = FALSE;
      UseCOM = TRUE;
      COMSTATUS = COMSTANDARD;
   }: "Standard object for communication configuration";

}: "@T0x78@";

