/* MISRA RULE 19.15 VIOLATION: The file tcb.h is intentionally included multiple times. 
 * The file consists of multiple parts which are used only if the including file has 
 * set a certain define macro (osdPreTCB/osdPostTCB). Each part has a separate double 
 * include preventer. Typical MISRA checkers will not be able to find these multiple 
 * double include preventers.
 */
/* PRQA S 0883 EOF */
/* file: tcb.h, automatically generated by gentricAS.exe, Version: 5.05 */
/* configuration read from: C:\OS\OS2.0\OS_CONF.OIL */
/* generation at  : Thu Apr 21 09:39:04 2011 */
/* License CBD1000119 for BEIQI FOTON MOTOR CO.,LTD., beta license (valid from 2010-08-18 until 2011-08-31) */
/* Implementation: TriCore_1767 */
/* Version of general code: 5.15a */

#if defined USE_QUOTE_INCLUDES
 #include "vrm.h"
#else
 #include <vrm.h>
#endif
#define osdVrmGenMajRelNum 5
#define osdVrmGenMinRelNum 5
#if defined USE_QUOTE_INCLUDES
 #include "vrm.h"
#else
 #include <vrm.h>
#endif

#if osdPreTCB
#ifndef _PRE_TCB_H
#define _PRE_TCB_H

#define osdCompiler osdCompilerTaskingTriCore

#define osdLib 0
#define CC BCC2

#define osdSC SC1

#define osdSupportEnableDisableIntSource 0

#define STATUS_LEVEL EXTENDED_STATUS

#define osdFullPreempt 0
#define osdMixedPreempt 1
#define osdNonPreempt 0

#define osdNumberOfAllTasks 8
#define osdNumberOfBasicTasks 8
#define osdNumberOfExtendedTasks 0
#define osdTimingProtectionUsed 0
#define osdNumberOfPriorities 10
#define osdNumberOfAllResources 2
#define osdNumberOfTaskResources 2
#define osdNumberOfInterruptResources 0
#define osdNumberOfInternalResources 0
#define osdNumberOfAlarms 8
#define osdNumberOfVarAlarms 0
#define osdNumberOfVarHeapAlarms 0
#define osdNumberOfStatHeapAlarms 8
#define osdNumberOfAlarmCallback 0
#define osdNumberOfAlarmSetEvent 0
#define osdNumberOfAlarmActivateTask 8
#define osdNumberOfAlarmIncrementCounter 0
#define osdAlarmsOnSystemTimer 1
#define osdNumberOfCounters 1
#define osdNumberOfSWCounters 0
#define osdUseCounterAPI 0
#define osdNumberOfScheduleTables 0
#define osdNumberOfHiResSchedTabs 0
#define osdScheduleTablesOnSystemTimer 0
#define osdScheduleTableSyncUsed 0
#define osdNumberOfSTExpiryPoints 0
#define osdNumberOfSTSetEvent 0
#define osdNumberOfSTActivateTask 0
#define osdNumberOfSTEntries 0
#define osdNumberOfApplications 0
#define osdNumberOfTrustedFunctions 0

#define osdNumberOfCat2ISRs 1
#define osdNumberOfISRs 11
#define osdStackCheck 1
#define osdStackUsageMeasurement 1

#define osdTypeHeaderInclude 0

#define osdSuppressFilenames 1

#define osdEnableAssertions 0

#define osdORTIDebug 1
#define osdORTIVersion 200

#define osdORTIEnabled 1


typedef osuint8 EventMaskType;

#define osdEventMaskTypeSize 1

#define osdNumberOfAppModes 1

#define OSDEFAULTAPPMODE 0x01

#define osdGetServiceIdMacros 0
#define osdParameterAccessMacros 0

#define osdTimingMeasurement 0
#define osdProtectAndMeasureAll 0
#define osdAsSelected 0
#define osdOnlyMeasureAll 0

#define osdProtReactKillTaskIsrAllowed  1
#define osdProtReactKillApplAllowed     1
#define osdProtReactKillApplRestAllowed 1
#define osdProtReactShutdownAllowed     1

#define osdMultiStack 0
#define osdSingleStackOptimized 1
#define osdSingleStackOptimizedCS 2
#define osdSingleStackOsek 3
#define osdStackModel osdMultiStack


#define osdTC1775 0
#define osdTC1765 0
#define osdTC1796 0
#define osdTC1766 0
#define osdTC1797 0
#define osdTC1767 1

#define osdTC_CORE_VERSION 0x00000130

#define osdAlarmLevel 2
#define osdSystemLevel 2
#define osdSystemStackSize 1024U
#define osdInterruptVectorTableSize 255
#define osdHighLevel 254
#define osdTaskLevel 0
#define osdCpuFrequency 80.0000 /*MHz*/
#define osdCpuFrequency_kHz 80000UL

/* defines for interrupt priorities: */
#define osdIntPrioSpi_Irq0func 10
#define osdIntPrioSpi_Irq1func 11
#define osdIntPrioCanIsr_0 35
#define osdIntPrioCanIsr_1 36
#define osdIntPrioAdc_Irq0func 12
#define osdIntPrioAdc_Irq2func 13
#define osdIntPrioAdc_Irq1func 14
#define osdIntPrioAdc_Irq3func 15
#define osdIntPrioGpt_Irq1func 16
#define osdIntPrioGpt_Irq2func 17
#define osdIntPrioosTimerInt 2


#define osdVectorTableInRAM 0

#if (osdNumberOfCat2ISRs >0)
extern const osuint32 osSRCtab[osdNumberOfCat2ISRs];
#else
extern const osuint32 osSRCtab[1];
#endif
#define osdUseHighResolutionTimer 0
#define osdProvideTimeStamp 0
#define osdSystemCounterNeeded 1
#define osdUserDefinedSystemTimer 0
#define osdSystemTimerReloadValue 0x00009c40UL
#define osdSystemTimerPrescaler 0x00000001UL
#define osdSTM_CLC_VAL   0x00000100UL
#define osdSTM_CMCON_VAL 0x0000001fUL
#define osdSystemPrescaler 0x00000002UL
#define osSTM_TIMER_READ osSTM_TIM0

#define OSTICKDURATION 1000000UL   /* actual duration of a system counter tick in nanoseconds */

#define TICKTYPE_MIN 0x00000000UL
#define TICKTYPE_MAX 0xffffffffUL

/* max(number of priority,number of tasks) */

#define osdRTSize 1

#define osdErrorHook 1
#define osdPreTaskHook 0
#define osdPostTaskHook 0
#define osdStartupHook 1
#define osdShutdownHook 1
#define osdProtectionHook 0

#if osdProtectionHook

#if (osdTimingProtectionUsed && osdProtReactKillTaskIsrAllowed)
#define osdKillTaskIsrPossible 1
#endif /*(osdTimingProtectionUsed && osdProtReactKillTaskIsrAllowed)*/

#if ((osdSC== SC3) || (osdSC== SC4))
#if (osdProtReactKillTaskIsrAllowed || osdProtReactKillApplAllowed || osdProtReactKillApplRestAllowed)
#ifndef osdKillTaskIsrPossible /* prevent from double-definition */
#define osdKillTaskIsrPossible 1
#endif
#endif /* (osdProtReactKillTaskIsrAllowed || osdProtReactKillApplAllowed || osdProtReactKillApplRestAllowed) */
#if (osdProtReactKillApplAllowed || osdProtReactKillApplRestAllowed)
#define osdKillApplPossible 1
#endif /* (osdProtReactKillApplAllowed || osdProtReactKillApplRestAllowed) */
#endif /* ((osdSC== SC3) || (osdSC== SC4)) */

#endif /* osdProtectionHook */

#ifndef osdKillTaskIsrPossible
#define osdKillTaskIsrPossible 0
#endif

#ifndef osdKillApplPossible
#define osdKillApplPossible 0
#endif

#define osdNumberOfProcesses (osdNumberOfAllTasks+osdNumberOfCat2ISRs)

#endif /* _PRE_TCB_H (double include preventer) */
#endif /* osdPreTCB */

/* Start of invariant part */
/* double include preventer for this part of the file */
#ifndef osd_TCB_H_SFR_OFFSETS
#define osd_TCB_H_SFR_OFFSETS

#define os_PSW_OFFSET 0xFE04U
#define os_SYSCON_OFFSET 0xFE14U
#define os_PCXI_OFFSET 0xFE00U
#define os_FCX_OFFSET 0xFE38U
#define os_ICR_OFFSET 0xFE2CU
#define os_CPM0_OFFSET 0xE200U
#define os_CPM1_OFFSET 0xE280U
#define os_CPR0_0L_OFFSET 0xD000U
#define os_CPR0_0U_OFFSET 0xD004U
#define os_CPR0_1L_OFFSET 0xD008U
#define os_CPR0_1U_OFFSET 0xD00CU
#define os_CPR1_0L_OFFSET 0xD400U
#define os_CPR1_0U_OFFSET 0xD404U
#define os_CPR1_1L_OFFSET 0xD408U
#define os_CPR1_1U_OFFSET 0xD40CU
#define os_DPM0_OFFSET 0xE000U
#define os_DPM1_OFFSET 0xE080U
#define os_DPR0_0L_OFFSET 0xC000U
#define os_DPR0_0U_OFFSET 0xC004U
#define os_DPR0_1L_OFFSET 0xC008U
#define os_DPR0_1U_OFFSET 0xC00CU
#define os_DPR0_2L_OFFSET 0xC010U
#define os_DPR0_2U_OFFSET 0xC014U
#define os_DPR0_3L_OFFSET 0xC018U
#define os_DPR0_3U_OFFSET 0xC01CU
#define os_DPR1_0L_OFFSET 0xC400U
#define os_DPR1_0U_OFFSET 0xC404U
#define os_DPR1_1L_OFFSET 0xC408U
#define os_DPR1_1U_OFFSET 0xC40CU
#define os_DPR1_2L_OFFSET 0xC410U
#define os_DPR1_2U_OFFSET 0xC414U
#define os_DPR1_3L_OFFSET 0xC418U
#define os_DPR1_3U_OFFSET 0xC41CU
#define os_ISP_OFFSET 0xFE28U

#endif /* osd_TCB_H_SFR_OFFSETS */
#if osdPostTCB
/* (POST because types have to be defined in OSEK.H) */

#ifndef OS_TCB_POST_INVARIANT /* double include preventer */
#define OS_TCB_POST_INVARIANT

#if (osdRTSize > 1)
   extern osqRAM1 osqRAM2 osPrioFlagType osqRAM3 osQReadyPrios[osdRTSize];
#else
   extern osqRAM1 osqRAM2 osPrioFlagType osqRAM3 osQReadyPrios;
#endif



#if (CC==BCC2) || (CC==ECC2)
   #if (osdNumberOfPriorities > 0)
      extern osqTcbRAM1 osqTcbRAM2 osQEntryCountType osqTcbRAM3 osQReadyTaskHead[osdNumberOfPriorities];
      extern osqTcbRAM1 osqTcbRAM2 osQEntryCountType osqTcbRAM3 osQReadyTaskTail[osdNumberOfPriorities];
      osqROM0 extern osqROM1 const osqROM2 osQEntryCountType osqROM3 oskQMaxActivations[osdNumberOfPriorities];
   #else
      extern osqTcbRAM1 osqTcbRAM2 osQEntryCountType osqTcbRAM3 osQReadyTaskHead[1];
      extern osqTcbRAM1 osqTcbRAM2 osQEntryCountType osqTcbRAM3 osQReadyTaskTail[1];
      osqROM0 extern osqROM1 const osqROM2 osQEntryCountType osqROM3 oskQMaxActivations[1];
   #endif
#else
   #if (osdNumberOfPriorities > 0)
      extern osqTcbRAM1 osqTcbRAM2 TaskType osqTcbRAM3 osQReadyTask[osdNumberOfPriorities];
   #else
      extern osqTcbRAM1 osqTcbRAM2 TaskType osqTcbRAM3 osQReadyTask[1];
   #endif
#endif


#if (osdNumberOfAllTasks > 0)
   #if osdMixedPreempt
     osqROM0 extern osqROM1 const osqROM2 osTaskPreemptionType osqROM3 oskTcbTaskPreemption[osdNumberOfAllTasks];
   #endif

  osqROM0 extern osqROM1 const osqROM2 osTaskFlagType osqROM3 oskTcbTaskFlags[osdNumberOfAllTasks];
#if (osdNumberOfExtendedTasks > 0) || osdLib
   extern osqTcbRAM1 osqTcbRAM2 EventMaskType osqTcbRAM3 osTcbSetEventMask[osdNumberOfExtendedTasks];
#endif
#else
   #if osdMixedPreempt
      osqROM0 extern osqROM1 const osqROM2 osTaskPreemptionType osqROM3 oskTcbTaskPreemption[1];
   #endif
   #if STATUS_LEVEL == EXTENDED_STATUS
      osqROM0 extern osqROM1 const osqROM2 osTaskFlagType osqROM3 oskTcbTaskFlags[1];
   #endif
#if (osdNumberOfExtendedTasks > 0) || osdLib
      extern osqTcbRAM1 osqTcbRAM2 EventMaskType osqTcbRAM3 osTcbSetEventMask[1];
#endif                                                 
#endif

#if ((CC == BCC2) || (CC == ECC2))
   #if (osdNumberOfPriorities > 0)
      extern osqROM0 osqPTcbRAM1 osqPTcbRAM2 TaskType osqPTcbRAM3 * osqROM1 const osqROM2 osqROM3 oskQActivationQueues[osdNumberOfPriorities];
   #else
      extern osqROM0 osqPTcbRAM1 osqPTcbRAM2 TaskType osqPTcbRAM3 * osqROM1 const osqROM2 osqROM3 oskQActivationQueues[1];
   #endif

   #if (osdNumberOfAllTasks > 0)
      extern osqTcbRAM1 osqTcbRAM2 osActivationCountType osqTcbRAM3 osTcbActivationCount[osdNumberOfAllTasks];
   #else
      extern osqTcbRAM1 osqTcbRAM2 osActivationCountType osqTcbRAM3 osTcbActivationCount[1];
   #endif
#endif

#if (osdNumberOfAllTasks > 0)
   extern osStackPtrType osqTcbRAM1 osqTcbRAM2 osqTcbRAM3 osTcbPCXI[osdNumberOfAllTasks];
#else
   extern osStackPtrType osqTcbRAM1 osqTcbRAM2 osqTcbRAM3 osTcbPCXI[1];
#endif
#if (osdNumberOfAllTasks > 0)
   osqROM0 extern osStackPtrType osqROM1 const osqROM2 osqROM3 oskTcbStackTop[osdNumberOfAllTasks];
#else
   osqROM0 extern osStackPtrType osqROM1 const osqROM2 osqROM3 oskTcbStackTop[1];
#endif
#if osdStackCheck
#if (osdNumberOfAllTasks > 0)
   osqROM0 extern osStackPtrType osqROM1 const osqROM2 osqROM3 oskTcbStackBottom[osdNumberOfAllTasks];
#else
   osqROM0 extern osStackPtrType osqROM1 const osqROM2 osqROM3 oskTcbStackBottom[1];
#endif
#endif
#if (osdNumberOfAllTasks > 0)
   extern osqTcbRAM1 osqTcbRAM2 osTaskStateType osqTcbRAM3 osTcbTaskState[osdNumberOfAllTasks];
   #if osdORTIDebug
    extern osqTcbRAM1 osqTcbRAM2 osPrioType osqTcbRAM3 osTcbActualPrio[osdNumberOfAllTasks];
    extern osqTcbRAM1 osqTcbRAM2 osuint8 osqTcbRAM3 osTcbORTIServiceId[osdNumberOfAllTasks];
   #endif
   #if STATUS_LEVEL == EXTENDED_STATUS
    #if (osdNumberOfInternalResources > 0) || (osdNumberOfInterruptResources > 0)
     extern osqTcbRAM1 osqTcbRAM2 osuint8 osqTcbRAM3 osTcbResourceCounter[osdNumberOfAllTasks];
    #endif
   #endif


   osqROM0 extern osTaskFctType osqROM1 const osqROM2 osqROM3 oskTcbTaskStartAddress[osdNumberOfAllTasks];
   osqROM0 extern osqROM1 const osqROM2 osPrioType osqROM3 oskTcbHomePrio[osdNumberOfAllTasks];
   osqROM0 extern osqROM1 const osqROM2 osActivationCountType osqROM3 oskTcbAllowedActivations[osdNumberOfAllTasks];

   osqROM0 extern osqROM1 const osqROM2 osPrioFlagType osqROM3 oskTcbReadyPrioMask[osdNumberOfAllTasks];
   
   #if (osdRTSize > 1)
      osqROM0 extern osqROM1 const osqROM2 osPrioOffsetType osqROM3 oskTcbReadyPrioOffset[osdNumberOfAllTasks];
   #endif

#else
   extern osqTcbRAM1 osqTcbRAM2 osTaskStateType osqTcbRAM3 osTcbTaskState[1];
   #if osdORTIDebug
   extern osqTcbRAM1 osqTcbRAM2 osPrioType osqTcbRAM3 osTcbActualPrio[1];
   extern osqTcbRAM1 osqTcbRAM2 osuint8 osqTcbRAM3 osTcbORTIServiceId[1];
   #endif

   #if STATUS_LEVEL == EXTENDED_STATUS
   #if (osdNumberOfInternalResources > 0) || (osdNumberOfInterruptResources > 0)
   extern osqTcbRAM1 osqTcbRAM2 osuint8 osqTcbRAM3 osTcbResourceCounter[1];
   #endif
   #endif
   osqROM0 extern osTaskFctType osqROM1 const osqROM2 osqROM3 oskTcbTaskStartAddress[1];
   osqROM0 extern osqROM1 const osqROM2 osPrioType osqROM3 oskTcbHomePrio[1];
   osqROM0 extern osqROM1 const osqROM2 osPrioFlagType osqROM3 oskTcbReadyPrioMask[1];
   osqROM0 extern osqROM1 const osqROM2 osActivationCountType osqROM3 oskTcbAllowedActivations[1];
#endif

/* Resources */

#if (osdNumberOfAllResources > 0)
   #if ((!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed)))
      extern osqTcbRAM1 osqTcbRAM2 osPrioType osqTcbRAM3 osResSavedPrio[osdNumberOfAllResources];
   #endif
   #if STATUS_LEVEL == EXTENDED_STATUS && ((!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed)))
      extern osqTcbRAM1 osqTcbRAM2 osResCounterType osqTcbRAM3 osResOccupationCounter[osdNumberOfAllResources];
   #endif
   #if ((STATUS_LEVEL == EXTENDED_STATUS) && osdEnableAssertions && ((!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed)))) || osdORTIDebug
      extern osqTcbRAM1 osqTcbRAM2 TaskType osqTcbRAM3 osResActualTask[osdNumberOfAllResources];
   #endif
   
   #if (!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed))
      osqROM0 extern osqROM1 const osqROM2 osPrioType osqROM3 oskResCeilingPrio[osdNumberOfAllResources];
   #endif
#else
   #if ((!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed)))
      extern osqTcbRAM1 osqTcbRAM2 osPrioType osqTcbRAM3 osResSavedPrio[1];
   #endif
   #if STATUS_LEVEL == EXTENDED_STATUS && ((!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed)))
      extern osqTcbRAM1 osqTcbRAM2 osResCounterType osqTcbRAM3 osResOccupationCounter[1];
   #endif
   #if ((STATUS_LEVEL == EXTENDED_STATUS) && osdEnableAssertions && ((!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed)))) || osdORTIDebug
      extern osqTcbRAM1 osqTcbRAM2 TaskType osqTcbRAM3 osResActualTask[1];
   #endif
   
   #if (!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed))
   osqROM0 extern osqROM1 const osqROM2 osPrioType osqROM3 oskResCeilingPrio[1];
   #endif
#endif
#if (!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed))
 #if (osdNumberOfTaskResources > 0)
   #if (osdRTSize > 1)
      osqROM0 extern osqROM1 const osqROM2 osPrioOffsetType osqROM3 oskResCeilingPrioOffset[osdNumberOfTaskResources];
   #endif
   osqROM0 extern osqROM1 const osqROM2 osPrioFlagType osqROM3 oskResCeilingPrioMask[osdNumberOfTaskResources];
 #else
   #if (osdRTSize > 1)
      osqROM0 extern osqROM1 const osqROM2 osPrioOffsetType osqROM3 oskResCeilingPrioOffset[1];
   #endif
   osqROM0 extern osqROM1 const osqROM2 osPrioFlagType osqROM3 oskResCeilingPrioMask[1];
 #endif
#endif /* (!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed)) */

#if (osdNumberOfInternalResources > 0)
   osqROM0 extern osqROM1 const osqROM2 osPrioType osqROM3 oskResInternalCeilingPrio[osdNumberOfAllTasks];
   osqROM0 extern osqROM1 const osqROM2 osPrioFlagType osqROM3 oskResInternalCeilingPrioMask[osdNumberOfAllTasks];
   #if (osdRTSize > 1)
      osqROM0 extern osqROM1 const osqROM2 osPrioOffsetType osqROM3 oskResInternalCeilingPrioOffset[osdNumberOfAllTasks];
   #endif
#endif
/* alarms */

#if (osdNumberOfAlarms > 0)
   extern osqTcbRAM1 osqTcbRAM2 TickType osqTcbRAM3 osAlarmTime[osdNumberOfAlarms];
   #ifndef osdUseGeneratedFastAlarm
      extern osqTcbRAM1 osqTcbRAM2 osuint8 osqTcbRAM3 osAlarmActivated[osdNumberOfAlarms];
      extern osqTcbRAM1 osqTcbRAM2 osHeapType osqTcbRAM3 osAlarmHeap[osdNumberOfAlarms+1];    /* Minimum Heap */
   #endif

   #if (osdNumberOfVarAlarms > 0)
   extern osqTcbRAM1 osqTcbRAM2 TickType osqTcbRAM3 osAlarmCycleTime[osdNumberOfVarAlarms];
   #endif

   osqROM0 extern osqROM1 const osqROM2 AlarmBaseType osqROM3 oskAlarmDefinitions;

   #if (osdNumberOfAlarms > 0)   
      osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskStaticAlarmTime[osdNumberOfAlarms];
      osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskStaticAlarmCycleTime[osdNumberOfAlarms];
   #endif

   #ifndef osdUseGeneratedFastAlarm
      osqROM0 extern osqROM1 const osqROM2 TaskType osqROM3 oskAlarmTask[osdNumberOfAlarms];
      #if (osdNumberOfAlarmSetEvent > 0)
        osqROM0 extern osqROM1 const osqROM2 EventMaskType osqROM3 oskAlarmEvent[osdNumberOfAlarms];
      #endif
      #if ((osdNumberOfAlarmSetEvent > 0) || (osdNumberOfAlarmCallback > 0) || (osdNumberOfAlarmIncrementCounter > 0))
        osqROM0 extern osqROM1 const osqROM2 osuint8 osqROM3 oskAlarmAction[osdNumberOfAlarms];
      #endif
      #if (osdNumberOfAlarmCallback > 0)
        osqROM0 extern osAlarmCallbackType osqROM1 const osqROM2 osqROM3 oskAlarmCallback[osdNumberOfAlarms];
      #endif
      #if (osdNumberOfAlarmIncrementCounter > 0)
        osqROM0 extern osqROM1 const osqROM2 CounterType osqROM3 oskAlarmIncrementCounterID[osdNumberOfAlarms];
      #endif
   #endif
#endif

/* schedule tables */

#if (osdNumberOfScheduleTables > 0)
   extern osqRAM1 osqRAM2 osSTIndexType osqRAM3 osSTCurrentIndex[osdNumberOfScheduleTables];
   extern osqRAM1 osqRAM2 osSTOffsetType osqRAM3 osSTCounter[osdNumberOfScheduleTables];
   extern osqRAM1 osqRAM2 ScheduleTableStatusType osqRAM3 osSTState[osdNumberOfScheduleTables];
   extern osqRAM1 osqRAM2 ScheduleTableType osqRAM3 osSTNextTable[osdNumberOfScheduleTables];

   osqROM0 extern osqROM1 const osqROM2 CounterType osqROM3 oskCounterOfST[osdNumberOfScheduleTables];
   osqROM0 extern osqROM1 const osqROM2 osSTIndexType osqROM3 oskSTStartIndex[osdNumberOfScheduleTables];
   osqROM0 extern osqROM1 const osqROM2 osSTOffsetType osqROM3 oskScheduleTableInitialOffset[osdNumberOfScheduleTables];
   osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskAutostartScheduleTableOffset[osdNumberOfScheduleTables];
   #if (osdScheduleTableSyncUsed != 0)
   osqROM0 extern osqROM1 const osqROM2 GlobalTimeTickType osqROM3 oskSTMaxAllowed[osdNumberOfScheduleTables];
   osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskMaxCorrectionSync     [osdNumberOfScheduleTables];
   osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskMaxCorrectionAsync[osdNumberOfScheduleTables];
   osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskPrecision       [osdNumberOfScheduleTables];
   #endif
   #if ((osdScheduleTableSyncUsed != 0) || (STATUS_LEVEL == EXTENDED_STATUS))
   osqROM0 extern osqROM1 const osqROM2 osuint8    osqROM3 oskSTSyncKind      [osdNumberOfScheduleTables];
   #endif
#else
   extern osqRAM1 osqRAM2 osSTIndexType osqRAM3 osSTCurrentIndex[1];
   extern osqRAM1 osqRAM2 osSTOffsetType osqRAM3 osSTCounter[1];
   extern osqRAM1 osqRAM2 ScheduleTableStatusType osqRAM3 osSTState[1];
   extern osqRAM1 osqRAM2 ScheduleTableType osqRAM3 osSTNextTable[1];

   osqROM0 extern osqROM1 const osqROM2 CounterType osqROM3 oskCounterOfST[1];
   osqROM0 extern osqROM1 const osqROM2 osSTIndexType osqROM3 oskSTStartIndex[1];
   osqROM0 extern osqROM1 const osqROM2 osSTOffsetType osqROM3 oskScheduleTableInitialOffset[1];
   osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskAutostartScheduleTableOffset[1];
   #if (osdScheduleTableSyncUsed != 0)
   osqROM0 extern osqROM1 const osqROM2 GlobalTimeTickType osqROM3 oskSTMaxAllowed[1];
   osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskMaxCorrectionSync     [1];
   osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskMaxCorrectionAsync[1];
   osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskPrecision       [1];
   #endif
   #if ((osdScheduleTableSyncUsed != 0) || (STATUS_LEVEL == EXTENDED_STATUS))
   osqROM0 extern osqROM1 const osqROM2 osuint8    osqROM3 oskSTSyncKind      [1];
   #endif
#endif

#if ((defined(osdTestMacros)) || (osdLib) || (osdSC== SC3) || (osdSC== SC4))
   #define osPreTaskHook  osInterPreTaskHook
   #define osPostTaskHook osInterPostTaskHook
#else
   #define osPreTaskHook  PreTaskHook
   #define osPostTaskHook PostTaskHook
#endif

#if osdLib
   #define osrRTSize                     oskRTSize 
   #define osrNumberOfPriorities         oskNumberOfPriorities
   #define osrNumberOfAppModes           oskNumberOfAppModes
   #define osrNumberOfAllTasks           oskNumberOfAllTasks
   #define osrNumberOfAllResources       oskNumberOfAllResources
   #define osrNumberOfTaskResources      oskNumberOfTaskResources
   #define osrNumberOfInterruptResources oskNumberOfInterruptResources
   #define osrNumberOfInternalResources  oskNumberOfInternalResources
   #define osrNumberOfExtendedTasks      oskNumberOfExtendedTasks
   #define osrNumberOfAlarms             oskNumberOfAlarms
   #define osrNumberOfVarAlarms          oskNumberOfVarAlarms
   #define osrNumberOfVarHeapAlarms      oskNumberOfVarHeapAlarms
   #define osrNumberOfStatHeapAlarms     oskNumberOfStatHeapAlarms
   #define osrNumberOfScheduleTables     oskNumberOfScheduleTables
   #define osrSystemTimer                oskSystemTimer
   #define osrNumberOfCounters           oskNumberOfCounters

   extern const osRTSizeType               oskRTSize;
   extern const osAppModeIndexType         oskNumberOfAppModes;
   extern const osTaskIndexType            oskNumberOfAllTasks;
   extern const osTaskIndexType            oskNumberOfExtendedTasks;
   extern const osPrioType                 oskNumberOfPriorities;
   extern const osResourceIndexType        oskNumberOfAllResources;
   extern const osResourceIndexType        oskNumberOfTaskResources;
   extern const osResourceIndexType        oskNumberOfInterruptResources;
   extern const osResourceIndexType        oskNumberOfInternalResources;

   extern const osAlarmIndexType           oskNumberOfAlarms;
   extern const osAlarmIndexType           oskNumberOfVarAlarms;
   extern const osAlarmIndexType           oskNumberOfVarHeapAlarms;
   extern const osAlarmIndexType           oskNumberOfStatHeapAlarms;

   extern const ScheduleTableType          oskNumberOfScheduleTables;
   extern const osSemaphoreType            oskNumberOfSemaphores;
   extern const CounterType                oskSystemTimer;
   extern const CounterType                oskNumberOfCounters;

   extern const TickType oskMaxAllowedValue;
   extern const TickType oskTicksPerBase;
   extern const TickType oskMinCycle;
   extern const osuint8 oskAlarmAutoStart[];

   extern const osuint8 oskTcbAutoStart[];


   extern const osVersionVariantCodingType oskLibVersionVariant;
   /* in library variant provide prototypes for interHook-functions */
   extern void osInterPreTaskHook(void);
   extern void osInterPostTaskHook(void);
   extern void osInterStartupHook(void);
   extern void osInterShutdownHook(StatusType Error);
   extern void osInterErrorHook(StatusType Error);
   extern void osInterCOMErrorHook(StatusType Error);

#else
   #define osrRTSize                      osdRTSize 
   #define osrNumberOfPriorities          osdNumberOfPriorities 
   #define osrNumberOfAppModes            osdNumberOfAppModes
   #define osrNumberOfAllTasks            osdNumberOfAllTasks
   #define osrNumberOfAllResources        osdNumberOfAllResources
   #define osrNumberOfTaskResources       osdNumberOfTaskResources
   #define osrNumberOfInterruptResources  osdNumberOfInterruptResources
   #define osrNumberOfInternalResources   osdNumberOfInternalResources
   #define osrNumberOfExtendedTasks       osdNumberOfExtendedTasks
   #define osrNumberOfAlarms              osdNumberOfAlarms
   #define osrNumberOfVarAlarms           osdNumberOfVarAlarms
   #define osrNumberOfVarHeapAlarms       osdNumberOfVarHeapAlarms
   #define osrNumberOfStatHeapAlarms      osdNumberOfStatHeapAlarms
   #define osrNumberOfScheduleTables      osdNumberOfScheduleTables
   #define osrSystemTimer                 SystemTimer
   #define osrNumberOfCounters            osdNumberOfCounters
   /* in source code variant map hook routines directly to user functions */
#if ((osdSC== SC1) || (osdSC== SC2))
   #define osInterStartupHook             StartupHook
   #define osInterShutdownHook            ShutdownHook
   #define osInterErrorHook               ErrorHook
   #define osInterCOMErrorHook            COMErrorHook
#else
   extern void osInterStartupHook(void);
   extern void osInterShutdownHook(StatusType Error);
   extern void osInterErrorHook(StatusType Error);
   extern void osInterCOMErrorHook(StatusType Error);
#endif
#endif

#if osdLib
   #define osrSystemStackSize    oskSystemStackSize
   extern const osuint16          oskSystemStackSize;
#else
   #define osrSystemStackSize    osdSystemStackSize
#endif
#if osdLib
extern osStackDataType osSystemStack[];
#else
extern osStackDataType osSystemStack[osdSystemStackSize/sizeof(osStackDataType)];
#endif
#endif /* ifndef OS_TCB_POST_INVARIANT */ /* double include preventer */
#endif /* osdPostTCB */
/* End of invariant part */
#if osdPostTCB
#ifndef _POST_TCB_H
#define _POST_TCB_H


/* task start functions (only for call tree) */
void Task_1msfunc(void);
void Task_10msfunc(void);
void SCHM_TASK_CYCLE_10MSfunc(void);
void Task_100msfunc(void);
void Task_1000msfunc(void);
void Task_1ms_XCPfunc(void);
void Task_10ms_XCPfunc(void);
void Task_100ms_XCPfunc(void);

/* Tasks */
#define Task_1ms ((TaskType)0)
#define Task_10ms ((TaskType)1)
#define SCHM_TASK_CYCLE_10MS ((TaskType)2)
#define Task_100ms ((TaskType)3)
#define Task_1000ms ((TaskType)4)
#define Task_1ms_XCP ((TaskType)5)
#define Task_10ms_XCP ((TaskType)6)
#define Task_100ms_XCP ((TaskType)7)


#if (osdKillTaskIsrPossible || (osdSC== SC3) || (osdSC== SC4))
#if (osdNumberOfAllTasks > 0)
   extern osqTcbRAM1 osqTcbRAM2 osResourceIndexType osqTcbRAM3 osTcbLockedResource[osdNumberOfAllTasks];
#else
   extern osqTcbRAM1 osqTcbRAM2 osResourceIndexType osqTcbRAM3 osTcbLockedResource[1];
#endif
#endif
/* Resources */

#define COOPERATE ((ResourceType)0)
#define XCP ((ResourceType)1)


#if (STATUS_LEVEL == EXTENDED_STATUS) && osdEnableAssertions
 #if ((!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed)))
osqROM0 extern osqROM1 const osqROM2 osResAccessMaskType osqROM3 oskResAccessMask[osdNumberOfAllResources][1];


 #endif /* ((!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed))) */
#endif /* (STATUS_LEVEL == EXTENDED_STATUS) && osdEnableAssertions */

#if (osdKillTaskIsrPossible || (osdSC == SC3) || (osdSC == SC4))
#if (osdNumberOfAllResources > 0)
   extern osqTcbRAM1 osqTcbRAM2 osResourceIndexType osqTcbRAM3 osResNextLockedResource[osdNumberOfAllResources];
#else
   extern osqTcbRAM1 osqTcbRAM2 osResourceIndexType osqTcbRAM3 osResNextLockedResource[1];
#endif
#endif

/* Counter */

#define SystemTimer ((CounterType) 0)

osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskCounterMaxAllowedValue[1];
#define OSMAXALLOWEDVALUE_SystemTimer OSMAXALLOWEDVALUE
#define OSTICKSPERBASE_SystemTimer OSTICKSPERBASE
#define OSMINCYCLE_SystemTimer OSMINCYCLE
#define OSNANOSECONDSPERTICK_SystemTimer OSNANOSECONDSPERTICK





/* Time constants for counter SystemTimer */

/* Events */

/* Alarms */

/* Maximum possible allowed value of the system counter in ticks */
#define OSMAXALLOWEDVALUE (0x3fffffffUL)

/* Minimum allowed number of ticks for a cyclic alarm */
#define OSMINCYCLE 1

/* Number of ticks required to reach specific unit of the system counter */
#define OSTICKSPERBASE 1

/* tick time duration in nanoseconds */
#define OSNANOSECONDSPERTICK 1000000

#define USEC(x) ( ((TickType)(((((osuint32)(x))) + ( 1000UL  / 2 )) / 1000UL ))) /*	valid range for x: 0..4294966795	*/
#define MSEC(x) ( ((TickType)(((((osuint32)(x))))))) /*	valid range for x: 0..1073741823	*/
#define SEC(x) ( ((TickType)(((((osuint32)(x)) * 1000UL ))))) /*	valid range for x: 0..1073741	*/
#define OS_NS2TICKS_SystemTimer(x) ( ((TickType)(((((osuint32)(x))) + ( 1000000UL  / 2 )) / 1000000UL ))) /*	valid range for x: 0..4294467295	*/
#define OS_US2TICKS_SystemTimer(x) ( ((TickType)(((((osuint32)(x))) + ( 1000UL  / 2 )) / 1000UL ))) /*	valid range for x: 0..4294966795	*/
#define OS_MS2TICKS_SystemTimer(x) ( ((TickType)(((((osuint32)(x))))))) /*	valid range for x: 0..1073741823	*/
#define OS_SEC2TICKS_SystemTimer(x) ( ((TickType)(((((osuint32)(x)) * 1000UL ))))) /*	valid range for x: 0..1073741	*/
#define OS_TICKS2NS_SystemTimer(x) ( ((PhysicalTimeType)(((((osuint32)(x)) * 1000000UL ))))) /*	valid range for x: 0..4294	*/
#define OS_TICKS2US_SystemTimer(x) ( ((PhysicalTimeType)(((((osuint32)(x)) * 1000UL ))))) /*	valid range for x: 0..4294967	*/
#define OS_TICKS2MS_SystemTimer(x) ( ((PhysicalTimeType)(((((osuint32)(x))))))) /*	valid range for x: 0..4294967295	*/
#define OS_TICKS2SEC_SystemTimer(x) ( ((PhysicalTimeType)(((((osuint32)(x))) + ( 1000UL  / 2 )) / 1000UL ))) /*	valid range for x: 0..4294966795	*/
#define Alarm_10ms ((AlarmType)0)
#define Alarm_100ms ((AlarmType)1)
#define Alarm_SCHM_TASK_CYCLE_10MS ((AlarmType)2)
#define Alarm_1000ms ((AlarmType)3)
#define Alarm_1ms ((AlarmType)4)
#define Alarm_10ms_XCP ((AlarmType)5)
#define Alarm_100ms_XCP ((AlarmType)6)
#define Alarm_1ms_XCP ((AlarmType)7)


#if (osdNumberOfAlarms > 0)
osqROM0 extern osqROM1 const osqROM2 osuint8 osqROM3 oskAlarmAutoStart[osdNumberOfAlarms];
#endif

#if (osdNumberOfScheduleTables > 0)
osqROM0 extern osqROM1 const osqROM2 osuint8 osqROM3 oskScheduleTableAutoStart[osdNumberOfScheduleTables];
#endif

#if (osdNumberOfScheduleTables > 0)
osqROM0 extern osqROM1 const osqROM2 osuint8 osqROM3 oskScheduleTableAutoStartType[osdNumberOfScheduleTables];
#endif

#if (osdNumberOfAllTasks > 0)
osqROM0 extern osqROM1 const osqROM2 osuint8 osqROM3 oskTcbAutoStart[osdNumberOfAllTasks];
#endif

/* prototypes for alarm callback functions */
/* Schedule Tables */

#define osdHRST_PERIOD_IS_POWER_OF_2 0

/* ISRs */

#define osdIsrSpi_Irq0funcCat 1
#define osdIsrSpi_Irq1funcCat 1
#define osdIsrCanIsr_0Cat 1
#define osdIsrCanIsr_1Cat 1
#define osdIsrAdc_Irq0funcCat 1
#define osdIsrAdc_Irq2funcCat 1
#define osdIsrAdc_Irq1funcCat 1
#define osdIsrAdc_Irq3funcCat 1
#define osdIsrGpt_Irq1funcCat 1
#define osdIsrGpt_Irq2funcCat 1
#define osdIsrosTimerIntCat 2
typedef struct
{
#if ((osdSC== SC3) || (osdSC== SC4))
   osuint32 dpr1_0l;
   osuint32 dpr1_0u;
   osuint32 dpr1_1l;
   osuint32 dpr1_1u;
   osuint32 dpr1_2l;
   osuint32 dpr1_2u;
   osuint32 stackstart;
#endif
#if (osdKillTaskIsrPossible || (osdSC== SC3) || (osdSC== SC4))
   osuint32 storedPcxi;
#endif
#if ((osdSC== SC3) || (osdSC== SC4))
#if (osdNumberOfMsgCallbackNotifics > 0)
   osuint16 savedContext;
#endif
   ApplicationType savedApplID;
   ISRType currentISRID;
#endif
   ISRType savedISRID;
#if osdTimingProtectionUsed
   osProcessType ProcTP;
#endif
#if ((osdSC== SC3) || (osdSC== SC4))
   osuint8 isKilled;
#endif
#if (osdNumberOfInterruptResources > 0)
   osIntLevelType InitialIntLevel;
#endif
#if (osdORTIDebug && (osdORTIVersion == 200))
   osuint8 ORTIServiceId;
#endif
#if ((osdSC== SC3) || (osdSC== SC4))
   osuint8 InSystemFct;
#endif
} osIsrStoredInfoType;

#if (osdNumberOfCat2ISRs > 0)
   extern osIsrStoredInfoType osIsrStoredInfo[osdNumberOfCat2ISRs];
#else
   extern osIsrStoredInfoType osIsrStoredInfo[1];
#endif
/* Category 2 ISRs: */

#define osTimerInt  ((ISRType) 0)

#if ((osdSC== SC3) || (osdSC== SC4))
extern __far void *_lc_gb_osData_osTimerInt;
extern __far void *_lc_ge_osData_osTimerInt;
#endif

#if (osdKillTaskIsrPossible || (osdSC== SC3) || (osdSC== SC4))
#if (osdNumberOfCat2ISRs > 0)
   extern osqTcbRAM1 osqTcbRAM2 osResourceIndexType osqTcbRAM3 osIcbLockedResource[osdNumberOfCat2ISRs];
#else
   extern osqTcbRAM1 osqTcbRAM2 osResourceIndexType osqTcbRAM3 osIcbLockedResource[1];
#endif
#endif



/* Prototypes of Trap Handlers*/
#if ((osdSC== SC3) || (osdSC== SC4))
#if (((osdNumberOfAllTasks > 0) && !defined(osdActivateTaskNotUsed)))
__syscallfunc(1) StatusType osPsysActivateTask(TaskType);
#endif /* ((osdNumberOfAllTasks > 0) && !defined(osdActivateTaskNotUsed)) */
#if (((osdNumberOfAllTasks > 0) && !defined(osdTerminateTaskNotUsed)))
__syscallfunc(2) StatusType osPsysTerminateTask(void);
#endif /* ((osdNumberOfAllTasks > 0) && !defined(osdTerminateTaskNotUsed)) */
#if (((osdNumberOfAllTasks > 0) && !defined(osdChainTaskNotUsed)))
__syscallfunc(3) StatusType osPsysChainTask(TaskType);
#endif /* ((osdNumberOfAllTasks > 0) && !defined(osdChainTaskNotUsed)) */
#if (((osdNumberOfAllTasks > 0) && !defined(osdScheduleNotUsed)))
__syscallfunc(4) StatusType osPsysSchedule(void);
#endif /* ((osdNumberOfAllTasks > 0) && !defined(osdScheduleNotUsed)) */
#if (((osdNumberOfAllTasks > 0) && !defined(osdGetTaskIDNotUsed)))
__syscallfunc(5) StatusType osPsysGetTaskID(TaskRefType);
#endif /* ((osdNumberOfAllTasks > 0) && !defined(osdGetTaskIDNotUsed)) */
#if (((osdNumberOfAllTasks > 0) && !defined(osdGetTaskStateNotUsed)))
__syscallfunc(6) StatusType osPsysGetTaskState(TaskType, TaskStateRefType);
#endif /* ((osdNumberOfAllTasks > 0) && !defined(osdGetTaskStateNotUsed)) */
#if ((((osdNumberOfAllResources - osdNumberOfInternalResources) > 0) && !defined(osdGetResourceNotUsed)))
__syscallfunc(13) StatusType osPsysGetResource(ResourceType);
#endif /* (((osdNumberOfAllResources - osdNumberOfInternalResources) > 0) && !defined(osdGetResourceNotUsed)) */
#if ((((osdNumberOfAllResources - osdNumberOfInternalResources) > 0) && !defined(osdReleaseResourceNotUsed)))
__syscallfunc(14) StatusType osPsysReleaseResource(ResourceType);
#endif /* (((osdNumberOfAllResources - osdNumberOfInternalResources) > 0) && !defined(osdReleaseResourceNotUsed)) */
#if ((((CC == ECC1) || (CC == ECC2)) && (osdNumberOfExtendedTasks > 0) && !defined(osdSetEventNotUsed)))
__syscallfunc(15) StatusType osPsysSetEvent(TaskType, EventMaskType);
#endif /* (((CC == ECC1) || (CC == ECC2)) && (osdNumberOfExtendedTasks > 0) && !defined(osdSetEventNotUsed)) */
#if ((((CC == ECC1) || (CC == ECC2)) && (osdNumberOfExtendedTasks > 0) && !defined(osdClearEventNotUsed)))
__syscallfunc(16) StatusType osPsysClearEvent(EventMaskType);
#endif /* (((CC == ECC1) || (CC == ECC2)) && (osdNumberOfExtendedTasks > 0) && !defined(osdClearEventNotUsed)) */
#if ((((CC == ECC1) || (CC == ECC2)) && (osdNumberOfExtendedTasks > 0) && !defined(osdGetEventNotUsed)))
__syscallfunc(17) StatusType osPsysGetEvent(TaskType, EventMaskRefType);
#endif /* (((CC == ECC1) || (CC == ECC2)) && (osdNumberOfExtendedTasks > 0) && !defined(osdGetEventNotUsed)) */
#if ((((CC == ECC1) || (CC == ECC2)) && (osdNumberOfExtendedTasks > 0) && !defined(osdWaitEventNotUsed)))
__syscallfunc(18) StatusType osPsysWaitEvent(EventMaskType);
#endif /* (((CC == ECC1) || (CC == ECC2)) && (osdNumberOfExtendedTasks > 0) && !defined(osdWaitEventNotUsed)) */
#if (((osdNumberOfAlarms > 0) && !defined(osdGetAlarmBaseNotUsed)))
__syscallfunc(19) StatusType osPsysGetAlarmBase(AlarmType, AlarmBaseRefType);
#endif /* ((osdNumberOfAlarms > 0) && !defined(osdGetAlarmBaseNotUsed)) */
#if (((osdNumberOfAlarms > 0) && !defined(osdGetAlarmNotUsed)))
__syscallfunc(20) StatusType osPsysGetAlarm(AlarmType, TickRefType);
#endif /* ((osdNumberOfAlarms > 0) && !defined(osdGetAlarmNotUsed)) */
#if (((osdNumberOfAlarms > 0) && !defined(osdSetRelAlarmNotUsed)))
__syscallfunc(21) StatusType osPsysSetRelAlarm(AlarmType);
#endif /* ((osdNumberOfAlarms > 0) && !defined(osdSetRelAlarmNotUsed)) */
#if (((osdNumberOfAlarms > 0) && !defined(osdSetAbsAlarmNotUsed)))
__syscallfunc(22) StatusType osPsysSetAbsAlarm(AlarmType);
#endif /* ((osdNumberOfAlarms > 0) && !defined(osdSetAbsAlarmNotUsed)) */
#if (((osdNumberOfAlarms > 0) && !defined(osdCancelAlarmNotUsed)))
__syscallfunc(23) StatusType osPsysCancelAlarm(AlarmType);
#endif /* ((osdNumberOfAlarms > 0) && !defined(osdCancelAlarmNotUsed)) */
__syscallfunc(43) void osPsysShutdownOS(StatusType);
#if (((osdNumberOfAppModes > 1) && !defined(osdGetActiveApplicationModeNotUsed)))
__syscallfunc(24) AppModeType osPsysGetActiveApplicationMode(void);
#endif /* ((osdNumberOfAppModes > 1) && !defined(osdGetActiveApplicationModeNotUsed)) */
#if ((!defined(osdGetApplicationIDNotUsed)))
__syscallfunc(30) ApplicationType osPsysGetApplicationID(void);
#endif /* (!defined(osdGetApplicationIDNotUsed)) */
#if ((!defined(osdCheckTaskMemoryAccessNotUsed)))
__syscallfunc(31) AccessType osPsysCheckTaskMemoryAccess(TaskType, MemoryStartAddressType, MemorySizeType);
#endif /* (!defined(osdCheckTaskMemoryAccessNotUsed)) */
#if ((!defined(osdCheckISRMemoryAccessNotUsed)))
__syscallfunc(36) AccessType osPsysCheckISRMemoryAccess(ISRType, MemoryStartAddressType, MemorySizeType);
#endif /* (!defined(osdCheckISRMemoryAccessNotUsed)) */
#if ((!defined(osdCheckObjectOwnershipNotUsed)))
__syscallfunc(32) ApplicationType osPsysCheckObjectOwnership(ObjectTypeType, ObjectIDType);
#endif /* (!defined(osdCheckObjectOwnershipNotUsed)) */
#if ((!defined(osdCheckObjectAccessNotUsed)))
__syscallfunc(34) ObjectAccessType osPsysCheckObjectAccess(ApplicationType, ObjectTypeType, ObjectIDType);
#endif /* (!defined(osdCheckObjectAccessNotUsed)) */
#if ((!defined(osdCallTrustedFunctionNotUsed)))
__syscallfunc(33) StatusType osPsysCallTrustedFunction(TrustedFunctionIndexType, TrustedFunctionParameterRefType);
#endif /* (!defined(osdCallTrustedFunctionNotUsed)) */
#if ((!defined(osdDisableAllInterruptsNotUsed)))
__syscallfunc(7) void osPsysDisableAllInterrupts(void);
#endif /* (!defined(osdDisableAllInterruptsNotUsed)) */
#if ((!defined(osdEnableAllInterruptsNotUsed)))
__syscallfunc(8) void osPsysEnableAllInterrupts(void);
#endif /* (!defined(osdEnableAllInterruptsNotUsed)) */
#if ((!defined(osdSuspendAllInterruptsNotUsed)))
__syscallfunc(11) void osPsysSuspendAllInterrupts(void);
#endif /* (!defined(osdSuspendAllInterruptsNotUsed)) */
#if ((!defined(osdResumeAllInterruptsNotUsed)))
__syscallfunc(12) void osPsysResumeAllInterrupts(void);
#endif /* (!defined(osdResumeAllInterruptsNotUsed)) */
#if ((!defined(osdSuspendOSInterruptsNotUsed)))
__syscallfunc(9) void osPsysSuspendOSInterrupts(void);
#endif /* (!defined(osdSuspendOSInterruptsNotUsed)) */
#if ((!defined(osdResumeOSInterruptsNotUsed)))
__syscallfunc(10) void osPsysResumeOSInterrupts(void);
#endif /* (!defined(osdResumeOSInterruptsNotUsed)) */
#if (((osdNumberOfSWCounters > 0) && !defined(osdIncrementCounterNotUsed)))
__syscallfunc(37) StatusType osPsysIncrementCounter(CounterType);
#endif /* ((osdNumberOfSWCounters > 0) && !defined(osdIncrementCounterNotUsed)) */
#if (((osdNumberOfScheduleTables > 0) && !defined(osdStartScheduleTableRelNotUsed)))
__syscallfunc(38) StatusType osPsysStartScheduleTableRel(ScheduleTableType, TickType);
#endif /* ((osdNumberOfScheduleTables > 0) && !defined(osdStartScheduleTableRelNotUsed)) */
#if (((osdNumberOfScheduleTables > 0) && !defined(osdStartScheduleTableAbsNotUsed)))
__syscallfunc(39) StatusType osPsysStartScheduleTableAbs(ScheduleTableType, TickType);
#endif /* ((osdNumberOfScheduleTables > 0) && !defined(osdStartScheduleTableAbsNotUsed)) */
#if (((osdNumberOfScheduleTables > 0) && !defined(osdStopScheduleTableNotUsed)))
__syscallfunc(40) StatusType osPsysStopScheduleTable(ScheduleTableType);
#endif /* ((osdNumberOfScheduleTables > 0) && !defined(osdStopScheduleTableNotUsed)) */
#if (((osdNumberOfScheduleTables > 0) && !defined(osdNextScheduleTableNotUsed)))
__syscallfunc(41) StatusType osPsysNextScheduleTable(ScheduleTableType, ScheduleTableType);
#endif /* ((osdNumberOfScheduleTables > 0) && !defined(osdNextScheduleTableNotUsed)) */
#if (((osdNumberOfScheduleTables > 0) && !defined(osdGetScheduleTableStatusNotUsed)))
__syscallfunc(42) StatusType osPsysGetScheduleTableStatus(ScheduleTableType, ScheduleTableStatusRefType);
#endif /* ((osdNumberOfScheduleTables > 0) && !defined(osdGetScheduleTableStatusNotUsed)) */
#if (((osdNumberOfApplications > 0) && !defined(osdTerminateApplicationNotUsed)))
__syscallfunc(44) StatusType osPsysTerminateApplication(RestartType);
#endif /* ((osdNumberOfApplications > 0) && !defined(osdTerminateApplicationNotUsed)) */
#if (((osdSupportEnableDisableIntSource != 0) && !defined(osdEnableInterruptSourceNotUsed)))
__syscallfunc(45) StatusType osPsysEnableInterruptSource(ISRType);
#endif /* ((osdSupportEnableDisableIntSource != 0) && !defined(osdEnableInterruptSourceNotUsed)) */
#if (((osdSupportEnableDisableIntSource != 0) && !defined(osdDisableInterruptSourceNotUsed)))
__syscallfunc(46) StatusType osPsysDisableInterruptSource(ISRType);
#endif /* ((osdSupportEnableDisableIntSource != 0) && !defined(osdDisableInterruptSourceNotUsed)) */
#if (((osdUseCOM) && !defined(osdStartCOMNotUsed)))
__syscallfunc(25) StatusType osPsysStartCOM(COMApplicationModeType);
#endif /* ((osdUseCOM) && !defined(osdStartCOMNotUsed)) */
#if (((osdUseCOM) && !defined(osdStopCOMNotUsed)))
__syscallfunc(26) StatusType osPsysStopCOM(void);
#endif /* ((osdUseCOM) && !defined(osdStopCOMNotUsed)) */
#if (((osdUseCOM) && (osdNumberOfAllMessages > 0) && !defined(osdInitMessageNotUsed)))
__syscallfunc(47) StatusType osPsysInitMessage(MessageIdentifier, ApplicationDataRef);
#endif /* ((osdUseCOM) && (osdNumberOfAllMessages > 0) && !defined(osdInitMessageNotUsed)) */
#if (((osdUseCOM) && (osdNumberOfAllMessages > 0) && !defined(osdSendMessageNotUsed)))
__syscallfunc(27) StatusType osPsysSendMessage(MessageIdentifier, ApplicationDataRef);
#endif /* ((osdUseCOM) && (osdNumberOfAllMessages > 0) && !defined(osdSendMessageNotUsed)) */
#if (((osdUseCOM) && (osdNumberOfAllMessages > 0) && !defined(osdReceiveMessageNotUsed)))
__syscallfunc(28) StatusType osPsysReceiveMessage(MessageIdentifier, ApplicationDataRef);
#endif /* ((osdUseCOM) && (osdNumberOfAllMessages > 0) && !defined(osdReceiveMessageNotUsed)) */
#if (((osdUseCOM) && (osdNumberOfAllMessages > 0) && (osdCCC==osdCCCB) && !defined(osdGetMessageStatusNotUsed)))
__syscallfunc(29) StatusType osPsysGetMessageStatus(MessageIdentifier);
#endif /* ((osdUseCOM) && (osdNumberOfAllMessages > 0) && (osdCCC==osdCCCB) && !defined(osdGetMessageStatusNotUsed)) */
#if (((osdScheduleTableSyncUsed != 0) && !defined(osdSyncScheduleTableNotUsed)))
__syscallfunc(49) StatusType osPsysSyncScheduleTable(ScheduleTableType, GlobalTimeTickType);
#endif /* ((osdScheduleTableSyncUsed != 0) && !defined(osdSyncScheduleTableNotUsed)) */
#if (((osdScheduleTableSyncUsed!=0) && !defined(osdStartScheduleTableSynchronNotUsed)))
__syscallfunc(51) StatusType osPsysStartScheduleTableSynchron(ScheduleTableType);
#endif /* ((osdScheduleTableSyncUsed!=0) && !defined(osdStartScheduleTableSynchronNotUsed)) */
#if (((osdScheduleTableSyncUsed != 0) && !defined(osdSetScheduleTableAsyncNotUsed)))
__syscallfunc(50) StatusType osPsysSetScheduleTableAsync(ScheduleTableType);
#endif /* ((osdScheduleTableSyncUsed != 0) && !defined(osdSetScheduleTableAsyncNotUsed)) */
#if (((osdTimingProtectionUsed) && (osdTimingMeasurement) && !defined(osdGetTaskMaxExecutionTimeNotUsed)))
__syscallfunc(52) StatusType osPsysGetTaskMaxExecutionTime(TaskType, osuint32*);
#endif /* ((osdTimingProtectionUsed) && (osdTimingMeasurement) && !defined(osdGetTaskMaxExecutionTimeNotUsed)) */
#if (((osdTimingProtectionUsed) && (osdTimingMeasurement) && !defined(osdGetISRMaxExecutionTimeNotUsed)))
__syscallfunc(53) StatusType osPsysGetISRMaxExecutionTime(ISRType, osuint32*);
#endif /* ((osdTimingProtectionUsed) && (osdTimingMeasurement) && !defined(osdGetISRMaxExecutionTimeNotUsed)) */
#if (((osdTimingProtectionUsed) && (osdTimingMeasurement) && !defined(osdGetTaskMaxBlockingTimeNotUsed)))
__syscallfunc(54) StatusType osPsysGetTaskMaxBlockingTime(TaskType, BlockTypeType, ResourceType, osuint32*);
#endif /* ((osdTimingProtectionUsed) && (osdTimingMeasurement) && !defined(osdGetTaskMaxBlockingTimeNotUsed)) */
#if (((osdTimingProtectionUsed) && (osdTimingMeasurement) && !defined(osdGetISRMaxBlockingTimeNotUsed)))
__syscallfunc(55) StatusType osPsysGetISRMaxBlockingTime(ISRType, BlockTypeType, ResourceType, osuint32*);
#endif /* ((osdTimingProtectionUsed) && (osdTimingMeasurement) && !defined(osdGetISRMaxBlockingTimeNotUsed)) */
#if (((osdTimingProtectionUsed) && (osdTimingMeasurement) && !defined(osdGetTaskMinInterArrivalTimeNotUsed)))
__syscallfunc(56) StatusType osPsysGetTaskMinInterArrivalTime(TaskType, osTPTimeStampRefType);
#endif /* ((osdTimingProtectionUsed) && (osdTimingMeasurement) && !defined(osdGetTaskMinInterArrivalTimeNotUsed)) */
#if (((osdTimingProtectionUsed) && (osdTimingMeasurement) && !defined(osdGetISRMinInterArrivalTimeNotUsed)))
__syscallfunc(57) StatusType osPsysGetISRMinInterArrivalTime(ISRType, osTPTimeStampRefType);
#endif /* ((osdTimingProtectionUsed) && (osdTimingMeasurement) && !defined(osdGetISRMinInterArrivalTimeNotUsed)) */
#endif


/* Prototypes of Interrupt Handlers */
void ososTimerInt_cat23(void);
void osTimerIntfunc(void);
void osIsrLevel3(void);
void osIsrLevel4(void);
void osIsrLevel5(void);
void osIsrLevel6(void);
void osIsrLevel7(void);
void osIsrLevel8(void);
void osIsrLevel9(void);
void osSpi_Irq0func_cat1(void);
void Spi_Irq0func(void);
void osSpi_Irq1func_cat1(void);
void Spi_Irq1func(void);
void osAdc_Irq0func_cat1(void);
void Adc_Irq0func(void);
void osAdc_Irq2func_cat1(void);
void Adc_Irq2func(void);
void osAdc_Irq1func_cat1(void);
void Adc_Irq1func(void);
void osAdc_Irq3func_cat1(void);
void Adc_Irq3func(void);
void osGpt_Irq1func_cat1(void);
void Gpt_Irq1func(void);
void osGpt_Irq2func_cat1(void);
void Gpt_Irq2func(void);
void osIsrLevel18(void);
void osIsrLevel19(void);
void osIsrLevel20(void);
void osIsrLevel21(void);
void osIsrLevel22(void);
void osIsrLevel23(void);
void osIsrLevel24(void);
void osIsrLevel25(void);
void osIsrLevel26(void);
void osIsrLevel27(void);
void osIsrLevel28(void);
void osIsrLevel29(void);
void osIsrLevel30(void);
void osIsrLevel31(void);
void osIsrLevel32(void);
void osIsrLevel33(void);
void osIsrLevel34(void);
void osIsrLevel37(void);
void osIsrLevel38(void);
void osIsrLevel39(void);
void osIsrLevel40(void);
void osIsrLevel41(void);
void osIsrLevel42(void);
void osIsrLevel43(void);
void osIsrLevel44(void);
void osIsrLevel45(void);
void osIsrLevel46(void);
void osIsrLevel47(void);
void osIsrLevel48(void);
void osIsrLevel49(void);
void osIsrLevel50(void);
void osIsrLevel51(void);
void osIsrLevel52(void);
void osIsrLevel53(void);
void osIsrLevel54(void);
void osIsrLevel55(void);
void osIsrLevel56(void);
void osIsrLevel57(void);
void osIsrLevel58(void);
void osIsrLevel59(void);
void osIsrLevel60(void);
void osIsrLevel61(void);
void osIsrLevel62(void);
void osIsrLevel63(void);
void osIsrLevel64(void);
void osIsrLevel65(void);
void osIsrLevel66(void);
void osIsrLevel67(void);
void osIsrLevel68(void);
void osIsrLevel69(void);
void osIsrLevel70(void);
void osIsrLevel71(void);
void osIsrLevel72(void);
void osIsrLevel73(void);
void osIsrLevel74(void);
void osIsrLevel75(void);
void osIsrLevel76(void);
void osIsrLevel77(void);
void osIsrLevel78(void);
void osIsrLevel79(void);
void osIsrLevel80(void);
void osIsrLevel81(void);
void osIsrLevel82(void);
void osIsrLevel83(void);
void osIsrLevel84(void);
void osIsrLevel85(void);
void osIsrLevel86(void);
void osIsrLevel87(void);
void osIsrLevel88(void);
void osIsrLevel89(void);
void osIsrLevel90(void);
void osIsrLevel91(void);
void osIsrLevel92(void);
void osIsrLevel93(void);
void osIsrLevel94(void);
void osIsrLevel95(void);
void osIsrLevel96(void);
void osIsrLevel97(void);
void osIsrLevel98(void);
void osIsrLevel99(void);
void osIsrLevel100(void);
void osIsrLevel101(void);
void osIsrLevel102(void);
void osIsrLevel103(void);
void osIsrLevel104(void);
void osIsrLevel105(void);
void osIsrLevel106(void);
void osIsrLevel107(void);
void osIsrLevel108(void);
void osIsrLevel109(void);
void osIsrLevel110(void);
void osIsrLevel111(void);
void osIsrLevel112(void);
void osIsrLevel113(void);
void osIsrLevel114(void);
void osIsrLevel115(void);
void osIsrLevel116(void);
void osIsrLevel117(void);
void osIsrLevel118(void);
void osIsrLevel119(void);
void osIsrLevel120(void);
void osIsrLevel121(void);
void osIsrLevel122(void);
void osIsrLevel123(void);
void osIsrLevel124(void);
void osIsrLevel125(void);
void osIsrLevel126(void);
void osIsrLevel127(void);
void osIsrLevel128(void);
void osIsrLevel129(void);
void osIsrLevel130(void);
void osIsrLevel131(void);
void osIsrLevel132(void);
void osIsrLevel133(void);
void osIsrLevel134(void);
void osIsrLevel135(void);
void osIsrLevel136(void);
void osIsrLevel137(void);
void osIsrLevel138(void);
void osIsrLevel139(void);
void osIsrLevel140(void);
void osIsrLevel141(void);
void osIsrLevel142(void);
void osIsrLevel143(void);
void osIsrLevel144(void);
void osIsrLevel145(void);
void osIsrLevel146(void);
void osIsrLevel147(void);
void osIsrLevel148(void);
void osIsrLevel149(void);
void osIsrLevel150(void);
void osIsrLevel151(void);
void osIsrLevel152(void);
void osIsrLevel153(void);
void osIsrLevel154(void);
void osIsrLevel155(void);
void osIsrLevel156(void);
void osIsrLevel157(void);
void osIsrLevel158(void);
void osIsrLevel159(void);
void osIsrLevel160(void);
void osIsrLevel161(void);
void osIsrLevel162(void);
void osIsrLevel163(void);
void osIsrLevel164(void);
void osIsrLevel165(void);
void osIsrLevel166(void);
void osIsrLevel167(void);
void osIsrLevel168(void);
void osIsrLevel169(void);
void osIsrLevel170(void);
void osIsrLevel171(void);
void osIsrLevel172(void);
void osIsrLevel173(void);
void osIsrLevel174(void);
void osIsrLevel175(void);
void osIsrLevel176(void);
void osIsrLevel177(void);
void osIsrLevel178(void);
void osIsrLevel179(void);
void osIsrLevel180(void);
void osIsrLevel181(void);
void osIsrLevel182(void);
void osIsrLevel183(void);
void osIsrLevel184(void);
void osIsrLevel185(void);
void osIsrLevel186(void);
void osIsrLevel187(void);
void osIsrLevel188(void);
void osIsrLevel189(void);
void osIsrLevel190(void);
void osIsrLevel191(void);
void osIsrLevel192(void);
void osIsrLevel193(void);
void osIsrLevel194(void);
void osIsrLevel195(void);
void osIsrLevel196(void);
void osIsrLevel197(void);
void osIsrLevel198(void);
void osIsrLevel199(void);
void osIsrLevel200(void);
void osIsrLevel201(void);
void osIsrLevel202(void);
void osIsrLevel203(void);
void osIsrLevel204(void);
void osIsrLevel205(void);
void osIsrLevel206(void);
void osIsrLevel207(void);
void osIsrLevel208(void);
void osIsrLevel209(void);
void osIsrLevel210(void);
void osIsrLevel211(void);
void osIsrLevel212(void);
void osIsrLevel213(void);
void osIsrLevel214(void);
void osIsrLevel215(void);
void osIsrLevel216(void);
void osIsrLevel217(void);
void osIsrLevel218(void);
void osIsrLevel219(void);
void osIsrLevel220(void);
void osIsrLevel221(void);
void osIsrLevel222(void);
void osIsrLevel223(void);
void osIsrLevel224(void);
void osIsrLevel225(void);
void osIsrLevel226(void);
void osIsrLevel227(void);
void osIsrLevel228(void);
void osIsrLevel229(void);
void osIsrLevel230(void);
void osIsrLevel231(void);
void osIsrLevel232(void);
void osIsrLevel233(void);
void osIsrLevel234(void);
void osIsrLevel235(void);
void osIsrLevel236(void);
void osIsrLevel237(void);
void osIsrLevel238(void);
void osIsrLevel239(void);
void osIsrLevel240(void);
void osIsrLevel241(void);
void osIsrLevel242(void);
void osIsrLevel243(void);
void osIsrLevel244(void);
void osIsrLevel245(void);
void osIsrLevel246(void);
void osIsrLevel247(void);
void osIsrLevel248(void);
void osIsrLevel249(void);
void osIsrLevel250(void);
void osIsrLevel251(void);
void osIsrLevel252(void);
void osIsrLevel253(void);
void osIsrLevel254(void);
void osIsrLevel255(void);



osqStack1 extern osqStack2 osStackDataType osqStack3 osTaskStack0 [256];
osqStack1 extern osqStack2 osStackDataType osqStack3 osTaskStack1 [256];
osqStack1 extern osqStack2 osStackDataType osqStack3 osTaskStack2 [256];
osqStack1 extern osqStack2 osStackDataType osqStack3 osTaskStack3 [256];
osqStack1 extern osqStack2 osStackDataType osqStack3 osTaskStack4 [256];
osqStack1 extern osqStack2 osStackDataType osqStack3 osTaskStack5 [32];
osqStack1 extern osqStack2 osStackDataType osqStack3 osTaskStack6 [32];
osqStack1 extern osqStack2 osStackDataType osqStack3 osTaskStack7 [32];
#endif /* _POST_TCB_H (double include preventer) */
#endif /* osdPostTCB */

#if osdPreTCB
#ifndef _PRE_TCBCOM_H
#define _PRE_TCBCOM_H

/* messages */

#define osdUseCOM 1
/* conformance class */
#define osdCCCA 1
#define osdCCCB 2
#define osdCCC osdCCCA

#define osdComStatusLevel osdComStandard

#define osdComErrorHook 0
#define osdComUseGetServiceID 0
#define osdComUseParameterAccess 0
#define osdComStartComExtension 0

#define osdMsgIdIsTransmit 0x8000U

#define osdNumberOfAllMessages 0
#define osdNumberOfMessageQueues 0
#define osdNumberOfRxMessages 0
#define osdNumberOfTxMessages 0
#define osdNumberOfMsgActivateTaskNotifics 0
#define osdNumberOfMsgSetEventNotifics 0
#define osdNumberOfMsgFlagNotifics 0
#define osdNumberOfMsgCallbackNotifics 0
#define osdNumberOfMessagesToInitialize 0

#define osrNumberOfMessageQueues    osdNumberOfMessageQueues
#define osrNumberOfMsgFlagNotifics  osdNumberOfMsgFlagNotifics
#define osrNumberOfCOMModes         osdNumberOfCOMModes
#define osrNumberOfRxMessages       osdNumberOfRxMessages
/* transmit messages */

/* receive messages */
#if osdNumberOfMsgFlagNotifics
#endif

/* Appmode identifier */
#define osdNumberOfCOMModes 0

#endif
#endif


/* double include preventer for this part of the file */
#ifndef osdTCB_H_SYSTEM_TIMER
#define osdTCB_H_SYSTEM_TIMER

#define osdSTM 1
#define osdGPTU 2
#define osdSystemTimerModule osdSTM

#define osdGPTU_T0      1
#define osdGPTU_T1      2
#define osdGPTU_T2      3
#define osdSTM_CMP0     4
#define osdSTM_CMP1     5
#define osdUserDefined  6
#define osdSystemTimer osdSTM_CMP0


#endif /* osdTCB_H_SYSTEM_TIMER double include preventer */



#if (osdPostTCB)

/* double include preventer for this part of the file */
#ifndef osdTCB_H_SYSTEM_TIMER_INIT
#define osdTCB_H_SYSTEM_TIMER_INIT

#if (osdSystemTimerModule == osdGPTU)
#define osGPTU_BASE_ADDR 0xF0000700UL
/*Register definitions for general purpose timer unit (GPTU) */
#define osGPTU_CLC     (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x00))))
#define osGPTU_T01IRS  (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x10))))
#define osGPTU_T01OTS  (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x14))))
#define osGPTU_T2CON   (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x18))))
#define osGPTU_T2RCCON (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x1C))))
#define osGPTU_T2AIS   (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x20))))
#define osGPTU_T2BIS   (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x24))))
#define osGPTU_T2ES    (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x28))))
#define osGPTU_OSEL    (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x2C))))
#define osGPTU_OUT     (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x30))))
#define osGPTU_T0DCBA  (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x34))))
#define osGPTU_T0BA    (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x34))))
#define osGPTU_T0DC    (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x36))))
#define osGPTU_T0CBA   (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x38))))
#define osGPTU_T0RDCBA (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x3C))))
#define osGPTU_T0RBA   (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x3C))))
#define osGPTU_T0RDC   (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x3E))))
#define osGPTU_T0RCBA  (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x40))))
#define osGPTU_T1DCBA  (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x44))))
#define osGPTU_T1BA    (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x44))))
#define osGPTU_T1DC    (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x46))))
#define osGPTU_T1CBA   (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x48))))
#define osGPTU_T1RDCBA (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x4C))))
#define osGPTU_T1RBA   (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x4C))))
#define osGPTU_T1RDC   (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x4E))))
#define osGPTU_T1RCBA  (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x50))))
#define osGPTU_T2      (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x54))))
#define osGPTU_T2A     (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x54))))
#define osGPTU_T2B     (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x56))))
#define osGPTU_T2RC0   (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x58))))
#define osGPTU_T2ARC0  (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x58))))
#define osGPTU_T2BRC0  (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x5A))))
#define osGPTU_T2RC1   (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x5C))))
#define osGPTU_T2ARC1  (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x5C))))
#define osGPTU_T2BRC1  (*((volatile osuint16*)((void*)(osGPTU_BASE_ADDR+0x5E))))
#define osGPTU_T012RUN (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0x60))))
#define osGPTU_SRSEL   (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0xDC))))
#define osGPTU_SRC7    (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0xE0))))
#define osGPTU_SRC6    (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0xE4))))
#define osGPTU_SRC5    (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0xE8))))
#define osGPTU_SRC4    (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0xEC))))
#define osGPTU_SRC3    (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0xF0))))
#define osGPTU_SRC2    (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0xF4))))
#define osGPTU_SRC1    (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0xF8))))
#define osGPTU_SRC0    (*((volatile osuint32*)((void*)(osGPTU_BASE_ADDR+0xFC))))

#endif /* (osdSystemTimerModule == osdGPTU) */

#if (osdSystemTimerModule == osdSTM)
#define osSTM_BASE_ADDR 0xF0000200UL
/*Register definitions for system timer module (STM) */
#define osSTM_CLC      (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x00))))
#define osSTM_TIM0     (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x10))))
#define osSTM_TIM1     (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x14))))
#define osSTM_TIM2     (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x18))))
#define osSTM_TIM3     (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x1C))))
#define osSTM_TIM4     (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x20))))
#define osSTM_TIM5     (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x24))))
#define osSTM_CAP      (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x2C))))
#define osSTM_CMP0     (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x30))))
#define osSTM_CMP1     (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x34))))
#define osSTM_CMCON    (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x38))))
#define osSTM_ICR      (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x3C))))
#define osSTM_ISRR     (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0x40))))
#define osSTM_SRC1     (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0xF8))))
#define osSTM_SRC0     (*((volatile osuint32*)((void*)(osSTM_BASE_ADDR+0xFC))))

#endif /* (osdSystemTimerModule == osdSTM)*/

/*Initialization of endinit-protected registers */
/* MISRA RULE 8.5 not violated:  osLeaveISR is inlined, therefore must be placed in a header file */
inline  void osInitProtected(void)
{ /* PRQA S 3406 */
#if ((osdTimingProtectionUsed != 0) || \
     ((osdUserDefinedSystemTimer == 0) && \
      ((osdScheduleTablesOnSystemTimer) || (osdAlarmsOnSystemTimer))))
#if (osdSystemTimerModule == osdGPTU)

   /*Initialization of the GPTU clock control register */
   osGPTU_CLC = osdGPTU_CLC_VAL;

#endif /* (osdSystemTimerModule == osdGPTU) */
#if (osdSystemTimerModule == osdSTM)

   /*Initialization of the STM clock control register */
   osSTM_CLC = osdSTM_CLC_VAL;

#endif /* (osdSystemTimerModule == osdSTM)*/
#endif /* osdTimingProtectionUsed ... */


#if (osdStackModel != osdSingleStackOsek)
   /*Load ISP-Register with System Stack Pointer */
   osd_mtcr(0x0000FE28UL, (osuint32) &(osSystemStack[ osdSystemStackSize/sizeof(osStackDataType) ]));
#else /*(osdStackModel != osdSingleStackOsek)*/
   /*Load ISP-Register with interrupt stack for category 1 ISRs */
   osd_mtcr(0x0000FE28UL, (osuint32) &(osCat1IsrStack[ osdCat1IsrStackSize/sizeof(osStackDataType) ]));
#endif /*(osdStackModel != osdSingleStackOsek) else*/
}


#endif /* osdTCB_H_SYSTEM_TIMER_INIT double include preventer */

#endif /*(osdPostTCB)*/

/* END OF C:\OS\OS2.0\tcb\tcb.h */

